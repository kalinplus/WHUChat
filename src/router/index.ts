import { setupLayouts } from "virtual:generated-layouts";
import { createRouter, createWebHistory } from "vue-router";
import { routes as autoGeneratedRoutes } from "vue-router/auto-routes";
import type { RouteRecordRaw } from "vue-router";
import { useStateStore } from "@/stores/states";

const indexRoute = autoGeneratedRoutes.find((route) => route.name === "/");
const indexComponent = indexRoute?.component;

// 创建完整的路由数组
const allRoutes = [
  ...autoGeneratedRoutes,
  {
    path: "/:user",
    name: "conversation",
    component: indexComponent,
    props: true,
    meta: { ...(indexRoute?.meta || {}), requiresAuth: true },
  },
  {
    path: "/:user/:session_id",
    name: "session",
    component: indexComponent,
    props: true,
    meta: { ...(indexRoute?.meta || {}), requiresAuth: true },
  },
];

console.log(allRoutes);

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: setupLayouts(allRoutes as RouteRecordRaw[]),
});

// 2. 实现 beforeEach 路由守卫
router.beforeEach(async (to, from, next) => {
  const stateStore = useStateStore();

  // --- 配置项 ---
  // 重要: 这里填写你的登录页面的实际路由名称
  const loginRouteName = "/login";
  // 重要: 用户已登录或通过 cookie 恢复会话后，如果直接访问登录页，则重定向到此路径
  const defaultAuthenticatedRoute = "/chat";
  // --- END 配置项 ---

  // 检查目标路由是否需要认证
  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);

  if (requiresAuth) {
    // 如果路由需要认证
    if (!stateStore.user) {
      // 并且 Pinia store 中没有用户信息，尝试通过 cookie 恢复
      try {
        const response = await fetch("/api/v1/gate/get_chatserver", {
          credentials: "include", // 确保 cookie 被发送
        });

        if (response.ok) {
          const data = await response.json();
          if (!data.error && data.uuid) {
            // 成功从 cookie 获取用户信息
            stateStore.setUser({
              uuid: data.uuid,
              username: data.username,
              addr: data.addr,
            });
            next(); // 继续导航
          } else {
            // API 返回错误或无效数据 (例如 cookie 过期或无效)
            console.warn(
              "Session could not be restored via cookie:",
              data.error || "No UUID returned"
            );
            stateStore.setUser(null); // 清除可能存在的无效用户状态
            // 重定向到登录页, 并传递原始目标路径以便登录后跳转回来
            // next({ name: loginRouteName, query: { redirect: to.fullPath } });
          }
        } else {
          // HTTP 请求失败 (例如 401 未授权)
          console.warn(
            `HTTP error ${response.status} while trying to restore session.`
          );
          stateStore.setUser(null);
          next({ name: loginRouteName, query: { redirect: to.fullPath } });
        }
      } catch (error) {
        // API 调用过程中发生异常
        console.error("Exception during session restoration API call:", error);
        stateStore.setUser(null);
        next({ name: loginRouteName, query: { redirect: to.fullPath } });
      }
    } else {
      // Pinia store 中已有用户信息，直接允许导航
      next();
    }
  } else {
    // 路由不需要认证
    if (to.name === loginRouteName && stateStore.user) {
      // 如果用户已登录，但试图访问登录页面，则重定向到默认的认证后页面
      next(defaultAuthenticatedRoute);
    } else {
      // 其他情况 (访问公共页面，或访问登录页但用户未登录)
      next(defaultAuthenticatedRoute);
    }
  }
});

// Workaround for https://github.com/vitejs/vite/issues/11804
router.onError((err, to) => {
  if (err?.message?.includes?.("Failed to fetch dynamically imported module")) {
    if (!localStorage.getItem("vuetify:dynamic-reload")) {
      console.log("Reloading page to fix dynamic import error");
      localStorage.setItem("vuetify:dynamic-reload", "true");
      location.assign(to.fullPath);
    } else {
      console.error("Dynamic import error, reloading page did not fix it", err);
    }
  } else {
    console.error(err);
  }
});

router.isReady().then(() => {
  localStorage.removeItem("vuetify:dynamic-reload");
});

export default router;
